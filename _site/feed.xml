<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-01-13T16:18:35+08:00</updated><id>/feed.xml</id><title type="html">Joshua</title><subtitle>东隅已逝，桑榆非晚</subtitle><author><name>Fanqiang Meng</name></author><entry><title type="html">webpack</title><link href="/webpack/" rel="alternate" type="text/html" title="webpack" /><published>2023-01-10T00:00:00+08:00</published><updated>2023-01-10T00:00:00+08:00</updated><id>/webpack</id><content type="html" xml:base="/webpack/"><![CDATA[<p>​</p>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="sample" /><category term="pic" /><summary type="html"><![CDATA[​]]></summary></entry><entry><title type="html">Typora搭配PicGo上传图片到阿里云OSS</title><link href="/picgo/" rel="alternate" type="text/html" title="Typora搭配PicGo上传图片到阿里云OSS" /><published>2022-12-28T00:00:00+08:00</published><updated>2022-12-28T00:00:00+08:00</updated><id>/picgo</id><content type="html" xml:base="/picgo/"><![CDATA[<p>​		自从用Jekyll来写博客后，发现方便是挺方便，直接用语雀或者Typora写完后放到Jekyll目录里build一下就ok了，但是有一个很明显的痛点，每次都要手动插入本地图片，这样不仅工作量大，而且图片都放在项目中文件体积越来越大，每次Jenkins构建任务光拉项目就很久了，我在想能不能用网络图片来代替，于是我就找到了PicGo</p>

<p>​		<strong>PicGo</strong>是一款开源跨平台的免费上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云OSS、腾讯云COS、七牛、GitHub等常见的免费图床网站或云存储上，使用起来非常便捷高效!</p>

<h3 id="安装picgo">安装PicGo</h3>

<ol>
  <li>
    <p>到<a href="https://github.com/Molunerfinn/PicGo">PicGo官网</a>拉取项目（官方也有详细的说明）</p>
  </li>
  <li>
    <p>使用yarn安装依赖，用npm 会报错</p>
  </li>
  <li>
    <p>构建应用 (Mac 需要有 Xcode 环境，Windows 需要有 VS 环境)</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ELECTRON_MIRROR</span><span class="o">=</span><span class="s2">"https://npmmirror.com/mirrors/electron/"</span>
<span class="c"># Windows ，则可以使用 set ELECTRON_MIRROR=https://npmmirror.com/mirrors/electron/</span>
npm run electron:build
</code></pre></div>    </div>
  </li>
</ol>

<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-28%20%E4%B8%8B%E5%8D%885.54.52.png" alt="截屏2022-12-28 下午5.54.52" /></p>

<center>	构建完成后会有一个dist_electron的文件夹，里面有对应的安装包</center>

<p>​	<img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-28%20%E4%B8%8B%E5%8D%885.54.15.png" alt="截屏2022-12-28 下午5.54.15" /></p>

<h3 id="配置阿里云oss">配置阿里云OSS</h3>

<ol>
  <li>KeyId和KeySecret在阿里云AccessKey管理中生成</li>
  <li>Bucket就是阿里云列表里的Bucket名称</li>
</ol>

<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-28%20%E4%B8%8B%E5%8D%884.39.00.png" alt="截屏2022-12-28 下午4.39.00" /></p>

<h3 id="typora图像配置">Typora图像配置</h3>

<p>上传服务选择PicGo.app</p>

<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-28%20%E4%B8%8B%E5%8D%885.51.52.png" alt="截屏2022-12-28 下午5.51.52" /></p>

<center>点击验证图片上传选项，没问题就可以尽情的耍了</center>
<p><br /><br /></p>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="sample" /><category term="pic" /><summary type="html"><![CDATA[​ 自从用Jekyll来写博客后，发现方便是挺方便，直接用语雀或者Typora写完后放到Jekyll目录里build一下就ok了，但是有一个很明显的痛点，每次都要手动插入本地图片，这样不仅工作量大，而且图片都放在项目中文件体积越来越大，每次Jenkins构建任务光拉项目就很久了，我在想能不能用网络图片来代替，于是我就找到了PicGo]]></summary></entry><entry><title type="html">Scrapy2.6 Document</title><link href="/scrapy/" rel="alternate" type="text/html" title="Scrapy2.6 Document" /><published>2022-09-02T00:00:00+08:00</published><updated>2022-09-02T00:00:00+08:00</updated><id>/scrapy</id><content type="html" xml:base="/scrapy/"><![CDATA[<p>Scrapy is a fast high-level web crawling and web scraping framework, used to crawl websites and extract structured data from their pages. It can be used for a wide range of purposes, from data mining to monitoring and automated testing.</p>

<h2 id="安装scrapy">安装Scrapy</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>scrapy
</code></pre></div></div>
<blockquote>
  <p>为了避免与系统包冲突，文档中是建议在虚拟环境中安装</p>
</blockquote>

<h2 id="创建scrapy项目">创建Scrapy项目</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scrapy startproject &lt;name&gt; <span class="o">[</span>project_dir]
</code></pre></div></div>
<p>输入命令创建爬虫项目</p>

<p><strong>Scrapy项目目录</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
tutorial
├── scrapy.cfg                  <span class="c"># deploy configuration file</span>
└── tutorial                    <span class="c"># project's Python module, you'll import your code from here</span>
| ├── __init__.py               
| ├── items.py                  <span class="c"># project items definition file</span>
| ├── middlewares.py            <span class="c"># project middlewares file</span>
| ├── pipelines.py              <span class="c"># project pipelines file</span>
| ├── settings.py               <span class="c"># project settings file</span>
| └── spiders                   <span class="c"># a directory where you'll later put your spidersdeploy configuration file</span>
| | └── __init__.py            

</code></pre></div></div>

<h2 id="创建爬虫">创建爬虫</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scrapy genspider <span class="o">[</span><span class="nt">-t</span> template] &lt;name&gt; &lt;domain or URL&gt;

<span class="c"># spiders如果從項目內部調用，則在當前文件夾或當前項目的文件夾中創建一個新蜘蛛。</span>
<span class="c"># &lt;name&gt;參數設置為spider的，namewhile用於生成spider和spider的屬性。</span>
<span class="c"># &lt;domain or URL&gt;allowed_domainsstart_url</span>
</code></pre></div></div>

<h2 id="运行爬虫">运行爬虫</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scrapy crawl &lt;spider&gt;
</code></pre></div></div>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="sample" /><category term="pic" /><summary type="html"><![CDATA[Scrapy is a fast high-level web crawling and web scraping framework, used to crawl websites and extract structured data from their pages. It can be used for a wide range of purposes, from data mining to monitoring and automated testing.]]></summary></entry><entry><title type="html">Docker + Jenkins持续集成</title><link href="/jenkins/" rel="alternate" type="text/html" title="Docker + Jenkins持续集成" /><published>2022-07-24T00:00:00+08:00</published><updated>2022-07-24T00:00:00+08:00</updated><id>/jenkins</id><content type="html" xml:base="/jenkins/"><![CDATA[<p>记录一下基于<code class="language-plaintext highlighter-rouge">Docker | Jenkins | Github</code> 实现的持续集成</p>
<h2 id="拉取jenkins镜像运行容器">拉取Jenkins镜像，运行容器</h2>
<blockquote>
  <p>💡 Tips：如果需要用到宿主机docker命令记得映射</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 拉取 Jenkins 拉取镜像，这里使用支持 JDK8 的版本。</span>
docker pull jenkins/jenkins:latest-jdk8

<span class="c"># 运行容器</span>
docker run <span class="nt">-u</span> root <span class="nt">-d</span>  <span class="nt">--name</span> dp-jenkins  jenkins/jenkins:latest-jdk8


docker run <span class="nt">-u</span> root <span class="nt">-d</span> <span class="nt">-p</span> 9999:8080 <span class="nt">-v</span> /var/run/docker.sock:/var/run/docker.sock  <span class="nt">-v</span> /usr/bin/docker:/usr/bin/docker <span class="nt">--name</span> docker-jenkins jenkins/jenkins:latest-jdk8
</code></pre></div></div>
<h3 id="映射宿主机docker">映射宿主机Docker</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-v</span> /var/run/docker.sock:/var/run/docker.sock 

<span class="nt">-v</span> /usr/bin/docker:/usr/bin/docker
</code></pre></div></div>
<h2 id="配置jenkins">配置Jenkins</h2>
<blockquote>
  <p>💡 Tips：8080端口为jenkins服务默认的web访问端口 ，-p映射宿主机的指定端口</p>
</blockquote>

<p><strong>访问服务器地址的容器映射端口查看jenkins服务</strong>
首次登录需要默认密码
在容器终端到提示的对应目录下使用 <code class="language-plaintext highlighter-rouge">cat</code> 命令查看<strong>初始密码</strong>
登录后会提示安装插件，我直接安装通用的插件</p>
<h3 id="创建jenkins任务">创建Jenkins任务</h3>
<p>简单的配置下任务，就是项目的地址，还有账号密码或者密钥这些
配置完就可以尝试手动构建了
查看日志输出是否构建成功
构建成功，在<code class="language-plaintext highlighter-rouge">Workspace</code> 中就可以看到拉下来的项目了</p>
<h3 id="配置文件">配置文件</h3>
<h3 id="dockerfile配置">dockerfile配置</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 依赖 nginx 容器</span>
FROM nginx
<span class="c"># 作者</span>
MAINTAINER joshuaaam
<span class="c"># 首先删除 nginx default.conf 文件</span>
<span class="c"># RUN rm /etc/nginx/conf.d/default.conf</span>
<span class="c"># 用本地的 default.conf 替换 nginx 镜像的默认配置</span>
<span class="c"># ADD default.conf /etc/nginx/conf.d/</span>
<span class="c"># 将项目打包后的 dist 目录，拷贝到 default.conf 指定的发布目录 </span>
COPY _site/ /usr/share/nginx/html/
</code></pre></div></div>
<h3 id="jenkins构建执行shell">Jenkins构建执行shell</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 删除历史镜像</span>

<span class="nv">current_img</span><span class="o">=</span><span class="si">$(</span>docker images | <span class="nb">grep </span>jekll-image | <span class="nb">awk</span> <span class="s1">'{print $3}'</span><span class="si">)</span>
<span class="nv">current_con</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-a</span> | <span class="nb">awk</span> <span class="s1">'/jekll-image/ {print $1}'</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$current_con</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
      </span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">current_con is empty"</span>
<span class="k">else
      </span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">current_con is NOT empty"</span>
      docker rmi <span class="nt">--force</span> <span class="nv">$current_con</span>
<span class="k">fi

if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$current_img</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
      </span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">current_img is empty"</span>
<span class="k">else
      </span><span class="nb">echo</span> <span class="s2">"</span><span class="se">\$</span><span class="s2">current_img is NOT empty"</span>
      docker rmi <span class="nt">--force</span> <span class="nv">$current_img</span>
<span class="k">fi</span>

<span class="c"># 构建镜像  -t 镜像名 -f 指定构建文件  </span>
docker build <span class="nb">.</span> <span class="nt">-t</span> jekyll-image <span class="nt">-f</span> ./dockerfile

<span class="c"># 推送镜像</span>
<span class="c"># docker push jekyll-image</span>

<span class="c"># 启动容器</span>
docker run <span class="nt">--name</span> jekyll_web <span class="nt">-p</span> 9998:80  <span class="nt">-d</span> <span class="nt">-i</span> jekyll-image
</code></pre></div></div>

<p>重新手动构建后访问对应的映射端口就可以看到项目了</p>
<blockquote>
  <p>💡 Tips：这里要先配置好域名的转发</p>
</blockquote>

<h2 id="github-webhook">github webhook</h2>

<ol>
  <li>
    <p>github生成密钥</p>

    <p>登陆Github， <code class="language-plaintext highlighter-rouge">settings</code> - <code class="language-plaintext highlighter-rouge">Developer settings</code> -<code class="language-plaintext highlighter-rouge">Personnal access tokens</code> ，生成密钥</p>

    <p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-29%20%E4%B8%8A%E5%8D%889.10.40.png" alt="截屏2022-12-29 上午9.10.40" /></p>
  </li>
  <li>
    <p>Jenkins全局配置</p>

    <p>将密钥设置在Jenkins全局配置中</p>
  </li>
  <li>
    <p>Github配置webhook</p>

    <p>在项目的settings中配置webhook就是jenkins部署的地址 :) <code class="language-plaintext highlighter-rouge">例：http://ip:端口/github-webhook/</code></p>

    <blockquote>
      <p>💡 注意：结尾的/别忘了加</p>
    </blockquote>

    <p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-29%20%E4%B8%8A%E5%8D%8811.14.36.png" alt="截屏2022-12-29 上午11.14.36" /></p>
  </li>
  <li>
    <p>Jenkins任务配置</p>

    <p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-29%20%E4%B8%8A%E5%8D%889.02.52.png" alt="截屏2022-12-29 上午9.02.52" /></p>

    <p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-29%20%E4%B8%8B%E5%8D%881.57.21.png" alt="截屏2022-12-29 下午1.57.21" /></p>

    <p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-12-29%20%E4%B8%8A%E5%8D%889.03.18.png" alt="截屏2022-12-29 上午9.03.18" /></p>

    <center>这里的Secret text就是Github生成的密钥</center>

    <center>完事提交代码，就可以看到任务自动开始构建了</center>
  </li>
</ol>

<h2 id="踩坑">踩坑</h2>

<ul>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">docker1.13.1</code> 中， jenkins构建中执行shell使用dokcer 命令报错 Can’t open /etc/sysconfig/docker</p>

    <p><strong>原因：</strong>docker1.13.1  /usr/bin/ 下真正的binary是 docker-current，映射路径应该为<code class="language-plaintext highlighter-rouge"> -v /usr/bin/docker-current:/usr/bin/docker</code></p>
  </li>
  <li>
    <p><strong>没有加构建上下文路径</strong></p>

    <p>docker build 构建镜像要记得加上构建路径，默认 <code class="language-plaintext highlighter-rouge">Dockerfile</code> 为构建文件，-f（指定构建文件）-t (指定镜像名)</p>
  </li>
  <li>
    <p><strong>iptable 规则丢失，端口映射失效</strong></p>

    <p>因为重启防火墙，导致 <code class="language-plaintext highlighter-rouge">iptables</code>  规则丢失，端口映射失效，重启容器也报错
Error response from daemon: Cannot restart container e2da0a5efa1d: driver failed programming external connectivity on endpoint
<strong>解决办法：</strong>重启docker后再重启容器</p>
  </li>
  <li>
    <p><strong>jenkins执行shell删除镜像失败，如果存在容器，需要先删除容器</strong></p>

    <p>Error response from daemon: conflict: unable to delete ef1d6b961fd1 (cannot be forced) - image is being used by running container a1fc71b0491e Build step ‘Execute shell’ marked build as failure</p>
  </li>
</ul>

<h2 id="总结">总结</h2>
<p>​	最终实现了基于Docker+Jenkins+Github的持续集成，现在是在本地打包生成静态文件后再提交到Github去集成，后面考虑构建能够运行项目的ruby镜像，通过jenkins来打包项目;还有就是Github不太稳定，接下来打算在Docker中搭建Gitlab</p>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><summary type="html"><![CDATA[记录一下基于Docker | Jenkins | Github 实现的持续集成 拉取Jenkins镜像，运行容器 💡 Tips：如果需要用到宿主机docker命令记得映射]]></summary></entry><entry><title type="html">阿婆六茶花谷观星台银河拍摄</title><link href="/stars/" rel="alternate" type="text/html" title="阿婆六茶花谷观星台银河拍摄" /><published>2022-07-23T00:00:00+08:00</published><updated>2022-07-23T00:00:00+08:00</updated><id>/stars</id><content type="html" xml:base="/stars/"><![CDATA[<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_2423.jpg" alt="DSC_2423" /></p>

<blockquote>
  <p>拍摄于广州市从化区良口镇阿婆六村观星台</p>
</blockquote>

<p>没想到把，广州也有肉眼可以看见银河的地方，地点就在广州市从化区的阿婆六茶花谷、
观星台是在山上，上山需要走一个小时左右的山路，不少人到上面露营
上山的路在一间民宿旁边，可以问一下当地的村民，我们是傍晚上山，八点多到的观星台，拍了半个小时左右就摸黑下山了</p>

<blockquote>
  <p>注意：⚠️  山路很滑，下山一定要小心，特别是天黑下山</p>
</blockquote>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="sample" /><category term="pic" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_2423.jpg" /><media:content medium="image" url="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_2423.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">总有一些美好值得期待</title><link href="/yb2/" rel="alternate" type="text/html" title="总有一些美好值得期待" /><published>2021-12-13T00:00:00+08:00</published><updated>2021-12-13T00:00:00+08:00</updated><id>/yb2</id><content type="html" xml:base="/yb2/"><![CDATA[<p>记得《航拍中国》中有这么一句话，“总有一些美好值得期待“</p>

<p>梅里的日照金山便是我此行的期待</p>

<h2 id="行程">行程</h2>

<ul>
  <li>第一天 广州 ✈️  丽江，当天入住丽江古城</li>
  <li>第二天 丽江客运站乘坐班车前往德钦县，入住飞来寺</li>
  <li>第三天 早晨在飞来寺看日出，可惜云太多没看到日照金山，然后坐车前往西当，徒步🚶‍♂️进雨崩村，当晚入住雨崩上村</li>
  <li>第四天 雨崩上村 ➡️ 冰湖 ➡️ 雨崩上村</li>
  <li>第五天 雨崩上村 ➡️  雨崩下村 ➡️  神瀑 ➡️ 雨崩下村，当晚入住雨崩下村</li>
  <li>第六天 雨崩下村出🚶‍♀️尼农大峡谷，雨崩行程到此结束</li>
  <li>第七天 德钦县 🚗  香格里拉，临走前在雾浓顶看到了日照金山</li>
  <li>第八天 香格里拉 🚗  丽江 ✈️  广州</li>
</ul>

<p><img src="/assets/img/2021-12-13/IMG_2561.JPG" /></p>

<blockquote>
  <p>天还没亮 候机</p>
</blockquote>

<h2 id="人生第一次见到日照金山">人生第一次见到日照金山</h2>
<p>第一天到丽江后，在机场乘坐大巴前往丽江古城，选择古城的酒店主要有两个原因，一是离客运站不算远，方便隔天早上赶九点钟丽江前往德钦的直达班车，二是顺便可以逛逛古城；疫情期间来旅游的人不多，这是我觉得疫情期间出来玩的一点好处</p>

<p>第二天早上在丽江古城北门看到的玉龙雪山
<img src="/assets/img/2021-12-13/DSC_1292.JPG" /></p>

<h2 id="初见梅里">初见梅里</h2>
<p>据说进德钦的第一眼要是能看到梅里雪山会幸运一整年
因为这句话，一路上没敢合眼，就为了见证那“进德钦的第一眼”</p>

<p>当班车驶过眼前这座遮挡住的山峰时，眼前突然开阔起来，不远处，一大片雪山映入眼帘，那是梅里雪山！</p>

<p><img src="/assets/img/2021-12-13/1647156223135.JPG" /></p>

<p>看来我是幸运的，进德钦的第一眼我看到了梅里雪山，虽然有一大片云遮住了大部分的雪山，但是，唯一那座没有被云遮挡住的，正是主峰卡瓦格博，太震撼了</p>
<blockquote>
  <p>看着挺近，其实还要半个多小时才到德钦</p>
</blockquote>

<p>到飞来寺了，主峰已经被云遮挡住了</p>

<h2 id="雨崩徒步">雨崩徒步</h2>

<p>早上坐车前往西当（司机是前一天找好的），10:00 从西当出发开始徒步，徒步进村要走十几公里的山路，也可以选择花钱坐越野车进村
我走得比较慢，到雨崩上村的客栈时天已经黑了
实在是太累了，随便吃点东西就回房间休息了，因为三点钟还来起来看流星雨
刚好我们来的这几天遇上了双子座流星雨爆发的峰值期，凌晨三点起来看双子座流星雨</p>

<p><img src="/assets/img/2021-12-13/IMG_2562.PNG" /></p>

<blockquote>
  <p>第一次拍流星，而且用的套头，拍的不怎么样</p>
</blockquote>

<h2 id="冰湖">冰湖</h2>

<h2 id="神瀑">神瀑</h2>

<h2 id="值得期待的美好">值得期待的美好</h2>

<p>原本计划是雨崩结束之后去昆明或者大理玩两天再回广州，因为我出来的时候正好广州疫情严重，行程卡上带星我怕出行不便，本来打算直接回广州，</p>

<p>早上七点出发，</p>

<p>原先的计划是徒步完到昆明或者大理呆个一两天再回广州，因为我出来的时候广州疫情严重，我的行程卡上带着星号，怕出行不方便本来打算出雨崩后直接回广州。我也没有提前定机票，犹犹豫豫之后决定跟马叔</p>

<p>但是感觉假期还没结束提前回去有点可惜，所以没有提前定回程的机票，婷婷则是因为航班的问题，接下来的行程被推迟了，于是我们两个就跟着自驾来的马叔开启另一段旅程。</p>

<p>马叔他也没看到日照金山，所以想在德钦多待一天，碰碰运气看能不能看到日照金山</p>

<p>我们回到县城吃过饭后，就到梅里雪山的另外一个观景台雾浓顶，赶上今天天气很好，因为停电的原因门口也没人收费，于是我们在雾浓顶拍了一下午照片</p>

<p>看样子明天有很大机率能看到日照金山</p>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="trip" /><category term="pic" /><summary type="html"><![CDATA[记得《航拍中国》中有这么一句话，“总有一些美好值得期待“]]></summary></entry><entry><title type="html">总有一些美好值得期待</title><link href="/yb/" rel="alternate" type="text/html" title="总有一些美好值得期待" /><published>2021-12-13T00:00:00+08:00</published><updated>2021-12-13T00:00:00+08:00</updated><id>/yb</id><content type="html" xml:base="/yb/"><![CDATA[<p>记得《航拍中国》里有这样一句话，“总有一些美好值得期待”。那时候我给同行的伙伴看了我的手机壁纸。</p>

<p>那是一张梅里日照的金山壁纸，这就是我此行的期待！</p>

<p><img src="https://blog.impermanence.cn/assets/img/5541651987270.jpg" alt="image" />
<!-- <img src="/assets/img/2021-12-13/5531651986782.JPG"> -->
<!-- https://blog.impermanence.cn/assets/img/5541651987270.jpg --></p>

<h3 id="行程计划">行程计划</h3>

<ul>
  <li>第一天广州 ✈️   丽江，在丽江集合休息一天</li>
  <li>第二天一早到丽江客运站乘坐班车前往德钦县城，入住飞来寺</li>
  <li>第三天在飞来寺蹲一波日照金山，然后坐车到徒步的起点（西当温泉），然后徒步进村，当晚入住雨崩上村</li>
  <li>第四天从雨崩上村出发冰湖，往返还是住上村</li>
  <li>第五天一早出发雨崩下村，找住宿短暂休整后出发神瀑</li>
  <li>最后一天雨崩下村出发走尼农峡谷出雨崩村，徒步结束！</li>
</ul>

<p><br /></p>

<h3 id="初见梅里">初见梅里</h3>

<p>据说进德钦的第一眼，要是能看到梅里雪山会幸运一整年。</p>

<p>我想着试试看有没有这个好运能够在进德钦就看见梅里，于是我一路上瞪大眼睛，没敢睡觉</p>

<p>没想到真的看见了，而且还看到了梅里雪山的主峰-卡瓦格博！</p>

<p><img src="/assets/img/2021-12-13/1647156223135.JPG" /></p>

<p>等到我们到达飞来寺后主峰已经被厚厚的云层遮住了 ，这让我更加坚信此行一定顺利的</p>

<p>###</p>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="trip" /><category term="pic" /><summary type="html"><![CDATA[记得《航拍中国》里有这样一句话，“总有一些美好值得期待”。那时候我给同行的伙伴看了我的手机壁纸。]]></summary></entry><entry><title type="html">记录完整的项目部署</title><link href="/fwq/" rel="alternate" type="text/html" title="记录完整的项目部署" /><published>2021-05-26T00:00:00+08:00</published><updated>2021-05-26T00:00:00+08:00</updated><id>/fwq</id><content type="html" xml:base="/fwq/"><![CDATA[<h2 id="nginx">nginx</h2>
<h3 id="安装依赖">安装依赖</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># gcc安装，nginx源码编译需要</span>
yum <span class="nb">install </span>gcc-c++

<span class="c"># PCRE pcre-devel 安装，nginx 的 http 模块使用 pcre 来解析正则表达式</span>
yum <span class="nb">install</span> <span class="nt">-y</span> pcre pcre-devel

<span class="c"># zlib安装，nginx 使用zlib对http包的内容进行gzip</span>
yum <span class="nb">install</span> <span class="nt">-y</span> zlib zlib-devel

<span class="c"># OpenSSL 安装，强大的安全套接字层密码库，nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http）</span>
yum <span class="nb">install</span> <span class="nt">-y</span> openssl openssl-devel

</code></pre></div></div>
<h3 id="weget下载"><strong>weget下载</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 下载版本号可根据目前官网最新稳定版自行调整</span>
wget <span class="nt">-c</span> https://nginx.org/download/nginx-1.16.1.tar.gz
</code></pre></div></div>
<h3 id="安装"><strong>安装</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 根目录使用ls命令可以看到下载的nginx压缩包，然后解压</span>
<span class="nb">tar</span> <span class="nt">-zxvf</span> nginx-1.16.1.tar.gz

<span class="c"># 解压后进入目录</span>
<span class="nb">cd </span>nginx-1.16.1

<span class="c"># 使用默认配置</span>
./configure
<span class="c"># 有ssl模块的配置</span>
./configure <span class="nt">--prefix</span><span class="o">=</span>/usr/local/nginx <span class="nt">--with-http_ssl_module</span>

<span class="c"># 编译安装</span>
make
make <span class="nb">install</span>

<span class="c"># 查找安装路径，默认都是这个路径</span>
<span class="o">[</span>root@VM_0_12_centos ~]# pswhereis nginx
nginx: /usr/local/nginxmake <span class="nb">install</span>

<span class="c"># 启动、停止nginx</span>
<span class="nb">cd</span> /usr/local/nginx/sbin/
./nginx     <span class="c">#启动</span>
./nginx <span class="nt">-s</span> stop  <span class="c">#停止，直接查找nginx进程id再使用kill命令强制杀掉进程</span>
./nginx <span class="nt">-s</span> quit  <span class="c">#退出停止，等待nginx进程处理完任务再进行停止</span>
./nginx <span class="nt">-s</span> reload  <span class="c">#重新加载配置文件，修改nginx.conf后使用该命令，新配置即可生效</span>

<span class="c"># 重启nginx，建议先停止，再启动</span>
./nginx <span class="nt">-s</span> stop
./nginx

<span class="c"># 查看nginx进程，如下返回，即为成功</span>
<span class="o">[</span>root@VM_0_12_centos ~]# ps aux|grep nginx
root      5984  0.0  0.0 112708   976 pts/1    R+   14:41   0:00 <span class="nb">grep</span> <span class="nt">--color</span><span class="o">=</span>auto nginx
root     18198  0.0  0.0  20552   612 ?        Ss   11:28   0:00 nginx: master process ./nginx
nobody   18199  0.0  0.0  23088  1632 ?        S    11:28   0:00 nginx: worker process


</code></pre></div></div>
<h3 id="开机自启动"><strong>开机自启动</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 在rc.local增加启动代码即可</span>
vi /etc/rc.local
<span class="c"># 增加一行 /usr/local/nginx/sbin/nginx，增加后保存</span>

<span class="c"># 设置执行权限</span>
<span class="nb">cd</span> /etc
<span class="nb">chmod </span>755 rc.local
</code></pre></div></div>
<h3 id="nginxconf"><strong>nginx.conf</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service<span class="o">{</span>
 listen       80<span class="p">;</span>
        server_name localhost<span class="p">;</span>
        rewrite ^<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>https://<span class="nv">$host$1</span> permanent<span class="p">;</span> <span class="c">#把http的域名请求转成https</span>
        <span class="c">#charset koi8-r;</span>

        <span class="c">#access_log  logs/host.access.log  main;</span>

        location / <span class="o">{</span>
            root   /usr/local/dist<span class="p">;</span> <span class="c">#前端项目地址</span>
            index  index.html index.htm<span class="p">;</span>
        <span class="o">}</span>
        location /api/ <span class="o">{</span>
            proxy_pass http://127.0.0.1:7001/<span class="p">;</span> <span class="c">#代理转发地址,服务端口</span>
            proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
        <span class="o">}</span>      
<span class="o">}</span>
</code></pre></div></div>
<h3 id="https"><strong>https</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service<span class="o">{</span>
 listen       80<span class="p">;</span>
        server_name localhost<span class="p">;</span>
        rewrite ^<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>https://<span class="nv">$host$1</span> permanent<span class="p">;</span> <span class="c">#把http的域名请求转成https</span>
        <span class="c">#charset koi8-r;</span>

        <span class="c">#access_log  logs/host.access.log  main;</span>

        location / <span class="o">{</span>
            root   /usr/local/dist<span class="p">;</span> <span class="c">#前端项目地址</span>
            index  index.html index.htm<span class="p">;</span>
        <span class="o">}</span>     
<span class="o">}</span>

 server <span class="o">{</span>
        listen       443 ssl<span class="p">;</span>
        server_name  localhost<span class="p">;</span>

        ssl_certificate    cert/5638172_impermanence.cn.pem<span class="p">;</span> <span class="c">#证书配置</span>
        ssl_certificate_key  cert/5638172_impermanence.cn.key<span class="p">;</span> <span class="c">#证书配置</span>

        ssl_session_cache    shared:SSL:1m<span class="p">;</span>
        ssl_session_timeout  5m<span class="p">;</span>

        ssl_ciphers  HIGH:!aNULL:!MD5<span class="p">;</span>
        ssl_prefer_server_ciphers  on<span class="p">;</span>

        location / <span class="o">{</span>
            root   /usr/local/dist<span class="p">;</span>
            index  index.html index.htm<span class="p">;</span>
        <span class="o">}</span>
        
        <span class="c">#设置sll 要在443端口配置请求代理</span>
        location /api/ <span class="o">{</span>
            proxy_redirect off<span class="p">;</span>
            proxy_set_header Host <span class="nv">$host</span><span class="p">;</span>
            proxy_set_header X-Real-IP <span class="nv">$remote_addr</span><span class="p">;</span>
            proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
            proxy_pass http://127.0.0.1:9001/api/<span class="p">;</span>
        <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p><strong>重启</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./nginx <span class="nt">-s</span> reload
</code></pre></div></div>

<h2 id="mysql">Mysql</h2>
<h3 id="安装-1">安装</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 下载</span>
wget https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm

<span class="c"># 安装数据源</span>
yum <span class="nb">install </span>mysql80-community-release-el8-1.noarch.rpm

<span class="c"># 检查数据源</span>
yum repolist enabled | <span class="nb">grep</span> <span class="s2">"mysql.*-community.*"</span>

<span class="c"># 禁用centos8自带的mysql</span>
yum module disable mysql

<span class="c"># 安装数据库</span>
yum <span class="nb">install </span>mysql-community-server 
</code></pre></div></div>
<h3 id="启动">启动</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service mysqld start

service mysqld status
</code></pre></div></div>
<h3 id="修改密码">修改密码</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 显示mysql的随机密码</span>
<span class="nb">grep</span> <span class="s1">'temporary password'</span> /var/log/mysqld.log

<span class="c"># 登录并修改mysql密码</span>
mysql <span class="nt">-u</span> root <span class="nt">-p</span>

<span class="c">#修改密码</span>
ALTER USER <span class="s1">'root'</span>@<span class="s1">'localhost'</span> IDENTIFIED BY <span class="s1">'Mfq19970913.'</span><span class="p">;</span>
<span class="c"># 因为有密码策略，假如密码太简单会报错，需要修改策略</span>
<span class="c"># 修改密码长度</span>
<span class="nb">set </span>global validate_password.length<span class="o">=</span>1<span class="p">;</span>

<span class="c"># 修改密码等级</span>
<span class="nb">set </span>global validate_password.policy<span class="o">=</span>0<span class="p">;</span>
</code></pre></div></div>

<h2 id="node">Node</h2>
<h3 id="下载">下载</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://npm.taobao.org/mirrors/node/v14.17.0/node-v14.17.0-linux-x64.tar.xz

<span class="c">#解压</span>
<span class="nb">tar</span> <span class="nt">-xvf</span> node-v14.17.0-linux-x64.tar.xz
</code></pre></div></div>
<p>cd node-v10.16.0-linux-x64/bin/ &amp;&amp; ls 可以看到刚刚解压出来的bin文件里有node、npm、npx这几个文件,说明node安装成功了</p>
<h3 id="建立软连接">建立软连接</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /usr/local/node-v14.17.0-linux-x64/bin/node /usr/local/bin/

<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/node-v14.17.0-linux-x64/bin/npm /usr/local/bin/
</code></pre></div></div>
<h3 id="查看版本">查看版本</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> node <span class="nt">-v</span> 
</code></pre></div></div>

<h2 id="egg">Egg</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 安装依赖</span>
npm <span class="nb">install</span> <span class="nt">--production</span>

<span class="c"># 运行</span>
egg-scripts start <span class="nt">--port</span><span class="o">=</span>7001 <span class="nt">--daemon</span> <span class="nt">--title</span><span class="o">=</span>joshua_blog <span class="nt">--ignore-stderr</span>
</code></pre></div></div>
<blockquote>
  <p>注意：package.json 中的start配置 加上 -ignore-stderr 不然会报错</p>
</blockquote>

<h2 id="数据库迁移">数据库迁移</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create datebase xxx<span class="p">;</span>

use xxx<span class="p">;</span>

<span class="nb">set </span>names utf8<span class="p">;</span>

<span class="nb">source</span> /usr/database.sql<span class="p">;</span>

show tables<span class="p">;</span>

</code></pre></div></div>

<h2 id="linux命令">Linux命令</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 解压</span>
unzip xxx
<span class="nb">tar</span> <span class="nt">-zcvf</span> xxx.tar.gz

<span class="c"># 查看路径</span>
<span class="nb">pwd</span>

<span class="c"># 查看目录下的文件</span>
<span class="nb">ls</span>

<span class="c"># 创建文件夹</span>
<span class="nb">mkdir</span>

<span class="c"># 删除</span>
<span class="nb">rm</span> <span class="nt">-rf</span> xxx

<span class="nt">-f</span>　　　　   <span class="c"># --force　　　　　　	忽略不存在的文件，强制删除，无任何提示</span>
<span class="nt">-i</span>　　　　   <span class="c"># --interactive　　　 进行交互式地删除</span>
<span class="nt">-r</span> | <span class="nt">-R</span>　   <span class="c"># --recursive　　　 	递归式地删除列出的目录下的所有目录和文件</span>
<span class="nt">-v</span>　　　     <span class="c"># --verbose　　　　		详细显示进行的步骤</span>
<span class="nt">-rf</span>         <span class="c"># --组合命令          强制删除文件夹及内容不提示。（最常用）</span>

<span class="c"># 上传</span>
put <span class="nt">-r</span> 本地地址 服务器地址
</code></pre></div></div>
<h2 id="问题总结">问题总结</h2>
<h3 id="1source-sql报表不存在的错误">1、source sql报表不存在的错误</h3>
<p>原因：mysql版本不一致</p>
<h3 id="2阿里服务器重装系统后ssh连接不上">2、阿里服务器重装系统后ssh连接不上</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> ~/.ssh/known_hosts <span class="c"># 删除.ssh目录下的known_hosts文件</span>
</code></pre></div></div>
<h3 id="3上传文件413">3、上传文件413</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># nginx默认的request body为1M，小于我们上传的大小</span>

client_max_body_size 10m<span class="p">;</span> <span class="c"># 修改配置后重启nginx</span>

./nginx <span class="nt">-s</span> reload <span class="c"># 在nginx/sbin目录下执行</span>
</code></pre></div></div>
<h3 id="4图片转发">4、图片转发</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server <span class="o">{</span>
    listen 443<span class="p">;</span>
    server_name 10.44.99.10<span class="p">;</span>
    access_log /data/wwwlogs/access_nginx.log combined<span class="p">;</span>
    root /data/wwwroot/default<span class="p">;</span>
    index index.html index.htm index.php<span class="p">;</span>

　　# ~ ：波浪线表示开启正则匹配并区分大小写，后面跟的是正则表达式
   location ~ .<span class="k">*</span><span class="se">\.</span><span class="o">(</span>gif|jpg|jpeg|png<span class="o">)</span><span class="nv">$ </span><span class="o">{</span>
     root /opt/image/<span class="p">;</span> 
     <span class="c"># 这里的root是固定，并不是图片在root目录下， /opt/image/才是图片所在的路径。</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="5端口占用">5、端口占用</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>netstat <span class="nt">-tunlp</span>  <span class="c"># 查看端口占用情况</span>

netstat <span class="nt">-tunlp</span> |grep 7001 <span class="c"># 查看指定端口</span>

ps 29142 <span class="c"># 后面pid </span>

<span class="nb">kill</span> <span class="nt">-9</span> 29142 <span class="c"># 结束进程</span>
</code></pre></div></div>]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="linux" /><summary type="html"><![CDATA[nginx 安装依赖 ```bash gcc安装，nginx源码编译需要 yum install gcc-c++]]></summary></entry><entry><title type="html">为什么写这个博客</title><link href="/start/" rel="alternate" type="text/html" title="为什么写这个博客" /><published>2021-05-05T00:00:00+08:00</published><updated>2021-05-05T00:00:00+08:00</updated><id>/start</id><content type="html" xml:base="/start/"><![CDATA[<!-- ### 配置nginx -->

<h4 id="写这个博客的原因">写这个博客的原因</h4>

<p>记录平时学习、旅游、拍摄</p>

<!-- 因为疫情的原因，我被隔离了十来天，期间为了打发时间在网上学习（冲浪）的时候发现了一位同行前辈的个人博客，看了他的博客有些许感触，于是也开始 -->

<!-- #### 2、以后的计划 -->

<!-- * 希望能够持续的记录，向前辈看齐
* 目前是在本地和github pages上使用，后面计划在学习docker的时候，实现自动化部署到自己的服务器吧，毕竟github被墙 1 -->]]></content><author><name>Fanqiang Meng</name></author><category term="journal" /><category term="documentation" /><category term="sample" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">唯日出华美而无上</title><link href="/dongshandao/" rel="alternate" type="text/html" title="唯日出华美而无上" /><published>2020-10-01T00:00:00+08:00</published><updated>2020-10-01T00:00:00+08:00</updated><id>/dongshandao</id><content type="html" xml:base="/dongshandao/"><![CDATA[<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_0804.JPG" alt="DSC_0804" /></p>
<blockquote>
  <p>拍摄于东山岛金銮湾</p>
</blockquote>

<h2 id="天空之镜">天空之镜</h2>
<p>国庆假期，跟朋友们一起来东山岛</p>

<p>出发前，我在网上看了很多东山岛的旅游攻略，不止一次看到攻略中用“天空之境”来形容金銮湾</p>

<p>最后决定在行程的最后一天到金銮湾看了一场日出</p>

<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_0803.JPG" alt="DSC_0803" /></p>

<p>我们到海边的时候天已经亮了，人也很多</p>

<p>一路小跑穿过眼前的这片林子，生怕错过日出</p>

<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_0808.JPG" alt="DSC_0808" /></p>

<p><img src="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_0804.JPG" alt="DSC_0804" /></p>]]></content><author><name>Paul Le</name></author><category term="journal" /><category term="documentation" /><category term="trip" /><summary type="html"><![CDATA[拍摄于东山岛金銮湾]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_0808.JPG" /><media:content medium="image" url="https://joshuaaam.oss-cn-guangzhou.aliyuncs.com/img/DSC_0808.JPG" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>